local constructionutil = require "constructionutil"
local paramsutil = require "paramsutil"
local vec3 = require "vec3"
local transf = require "transf"
local cluster_config = require "industry_placement/cluster_config"

function data()

debugPrint(cluster_config.makeParams())

return {
	type = "INDUSTRY",
	order = 706,
	description = {
		name = _("Industry Cluster"),
		description = "",
	},
	soundConfig = {                                                               -- change sound set here.
		soundSet = { name = "goods_factory" },
		effects = {
			select =  {
				"selected_industry_goods_factory1.wav",
				"selected_industry_goods_factory2.wav",
				"selected_industry_goods_factory3.wav"
			}
		}
	},
	availability = { },
	categories = {"misc"},
	params = cluster_config.makeParams(),
	placementParams = {
		buildOrder = 0,
		initWeight = 0,
		tags = { "INDUSTRY_CLUSTER", },
		distanceWeights = {
			TOWN = -10,
		},
	},
	updateFn = function(params)
		local result = {}
		result.models = { }
		result.groundFaces = { }
		result.stocks = { }
		result.stockRules = { }

		-- result.personCapacity = { type = "INDUSTRIAL", capacity = 50 }
	
		constructionutil.makeStocks({
			stocks = {
				--{ cargoType = "PLANKS", type = "RECEIVING", x = 0, 	y = (-19.5 + (1 * 4 ) ), 	sizex = 1,	sizey = 1 },
			},
			rule = { input = { }, output = {  }, capacity = 0 }
		}, result)

		result.models[#result.models + 1] = { id = "industry/lane.mdl", transf = transf.transl({x = 0, y = -20, z = 0}) }
		result.models[#result.models + 1] = { id = "asset/icon/marker_exclamation.mdl", transf = transf.transl({x = 0, y = 0, z = 0})}
		--result.models[#result.models + 1] = { id = "industry/lane.mdl", transf = { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 15.00000, -20.00000, 0.00000, 1.00000 }, }
		--result.models[#result.models + 1] = { id = "industry/lane.mdl", transf = { 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -15.00000, -20.00000, 0.00000, 1.00000 }, }
		
		-- local groundFace = { {1, -40}, { 1, -30}, {-1, -30}, {-1, -40} }
		-- result.groundFaces[#result.groundFaces + 1] = { face = groundFace, modes = { { type = "FILL", key = "industry_floor.lua" } } }
		-- result.groundFaces[#result.groundFaces + 1] = { face = groundFace, modes = { { type = "STROKE_OUTER", key = "industry_floor_paving.lua" } } }

		result.terrainAlignmentLists = {
			{
				type = "EQUAL",
				faces = {{ {1, 1, 0}, {1, -1, 0}, {-1, -1, 0}, {-1, 1, 0} } },
				slopeLow = .35
			}
		}
		return result
    end
}

end